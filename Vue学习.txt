Vue是什么：构建用户界面的渐进式框架，只关注视图层(view)





组件间的通信：
    父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件
    父组件->子组件：
	组件实例的作用域是孤立的，不能再子组件直接用父组件的数据。
	可以在组件上使用自定义属性绑定数据，在组件中需要显示的用props声明自定义属性名。
    子组件->父组件：
	需要用到自定义事件，父组件用$on监听自定义事件，$emit触发父组件所关心的自定义事件
    非父子间的通信：
	可以把Vue实例作为中央事件总线(central event bus)
	这种方式组件嵌套的比较多，数据要改动，会越来越复杂，所以考虑用专门的状态管理模式(vueX)

单向数据流：
	数据从父组件流向（传递）给子组件，只能单向绑定。
	在子组件内部不应该修改父组件传递过来的数据
    解决办法：
	1、作为data中局部数据的初始值使用
	2、作为子组件中的computed树属性

    Props验证：
	组件可以为props指定验证要求，如果未指定验证要求，Vue会发出警告。
	props:{
		propA:Number,//指定类型
		propB:[String,Number],//多种类型
		propC:{type:String,required:true},//必传，且为字符串
		propD:{type:Number,default:100},//字符串类型，默认值为100
		propE:{type:Number,default:function(){return 1000}},
		propF:{validator:function(value){return value > 10}}//自定义验证规则
	}
    验证类型为原生构造器：	String,Number,Function,Object,Boolean,Array

    使用slot分发内容：
	使用一种方式混合父组件的内容与子组件自己的模板，这个过程被称为"内容分发"。在子组件中使用特殊的<slot>元素作为内容的插槽。
	这样会使组件的课扩展性更强。
    单个slot：
	在子组件模板中有slot标签，被视为备用内容，在父组件不提供内容的情况下使用。如果父组件提供内容，则把整个内容片断插入到slot所在的DOM位置，并替换掉slot标签本身。
	子组件模板中没有slot标签，父组件提供的内容会被抛弃。
    具名slot：
	<slot>元素可以用一个特殊的属性name来配置如何分发内容。
	可以使用一个匿名的slot，处理那些没有对应slot的内容。
    编译作用域：
	父组件模板的内容在父组件作用域内编译。
	子组件模板的内容在子组件作用域内编译。

    封装组件：
	每个组件会提供一些标准且简单的应用接口，允许使用者设置和调整参数和属性。
	可以将不同来源的多个组件有机地结合在一起，快速构成一个符合实际需要的复杂(大型)应用程序。
	组件的特点：
		重用性 -- 能够公用和通用
		可定制性--可设置参数和属性
		高内聚性--功能完整
		互操作性--多组件协同工作
	Vue组件的API来自三部分
		props参数    传递数据给组件
		slot定制模板 外部模板混合子组件模板
		event自定义事件  监控子组件交互状态

动态组件：
	多个组件可以使用同一个挂载点，动态地在它们之间切换。使用保留的<component>元素，使用is特性进行动态绑定
	可以使用keep-alive把切出去的组件保留在内存中，这样可以保留它的状态，避免重新渲染。


创建工程目录vue-cli：
需安装node（新版已包含npm）
需安装npm
全局安装vue-cli工具（npm install -g @vue/cli）

进入要存放文件的目录。例：（/d/myGitResponsity/vue）
创建文件目录:
    一：vue create hello-world(选择相应的模式及添加选项)
    二：vue ui(可是化界面选项操作)


vuex介绍
多个视图依赖于同一状态
来自不同视图的行为需要变更同一状态
为vue.js开发的状态管理模式
组件状态集中管理
组件状态改变遵循统一的规则










